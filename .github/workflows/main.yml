name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  preflight:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - run: |
          set -e
          repo="$GITHUB_REPOSITORY"
          run_id=$GITHUB_RUN_ID
          cur_created=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/actions/runs/$run_id" | jq -r .created_at)
          while true; do
            others=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/actions/runs?status=in_progress&per_page=100" | jq --argjson rid "$run_id" --arg cur "$cur_created" '[.workflow_runs[] | select(.id != $rid and (.created_at < $cur)) | {id:.id,name:.name,status:.status,html_url:.html_url}]')
            queued=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/actions/runs?status=queued&per_page=100" | jq --argjson rid "$run_id" --arg cur "$cur_created" '[.workflow_runs[] | select(.id != $rid and (.created_at < $cur)) | {id:.id,name:.name,status:.status,html_url:.html_url}]')
            combined=$(jq -n --argjson a "$others" --argjson b "$queued" '$a + $b')
            if [ "$(echo "$combined" | jq 'length')" -eq 0 ]; then
              break
            fi
            echo "$combined" | jq -r '.[] | "\(.name) (\(.id)) - \(.status) - \(.html_url)"'
            sleep 30
          done

  build:
    runs-on: ubuntu-latest
    needs: preflight
    outputs:
      has_artifact: ${{ steps.artifact_check.outputs.has_artifact }}
    steps:
      - uses: actions/checkout@v4

      - id: check
        run: |
          if [ -f package.json ]; then echo "has_package=true" >> $GITHUB_OUTPUT; else echo "has_package=false" >> $GITHUB_OUTPUT; fi
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then echo "has_lock=true" >> $GITHUB_OUTPUT; else echo "has_lock=false" >> $GITHUB_OUTPUT; fi
          if [ -d public ]; then echo "has_public=true" >> $GITHUB_OUTPUT; else echo "has_public=false" >> $GITHUB_OUTPUT; fi

      - name: Setup Node
        if: ${{ steps.check.outputs.has_package == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: npm ci
        if: ${{ steps.check.outputs.has_package == 'true' && steps.check.outputs.has_lock == 'true' }}
        run: npm ci

      - name: npm install
        if: ${{ steps.check.outputs.has_package == 'true' && steps.check.outputs.has_lock != 'true' }}
        run: npm install

      - name: npm run build
        if: ${{ steps.check.outputs.has_package == 'true' }}
        run: npm run build

      - name: upload-pages
        if: ${{ steps.check.outputs.has_public == 'true' || steps.check.outputs.has_package == 'true' }}
        id: upload-pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./public

      - id: artifact_check
        run: |
          if [ -d public ] && [ "$(ls -A public 2>/dev/null | wc -l)" -gt 0 ]; then echo "has_artifact=true" >> $GITHUB_OUTPUT; else echo "has_artifact=false" >> $GITHUB_OUTPUT; fi

  deploy:
    if: ${{ needs.build.outputs.has_artifact == 'true' }}
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
    steps:
      - uses: actions/configure-pages@v4
      - uses: actions/deploy-pages@v4
